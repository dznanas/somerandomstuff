import express, { Request, Response } from "express";
import http from 'http';
import cors from 'cors';
import { ApolloServer } from '@apollo/server';
import { expressMiddleware } from '@apollo/server/express4';
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';
import {mergedTypeDefs} from './src/index.js';
import {mergedResolvers} from './src/index.js';
import "./db.js";
import "./src/sync.js";

interface MyContext {
    token?: string;
}

const app = express();
const httpServer = http.createServer(app);

const server = new ApolloServer<MyContext>({
    typeDefs: mergedTypeDefs,
    resolvers: mergedResolvers,
    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
});

await server.start();

app.use(
    '/',
    cors<cors.CorsRequest>(),
    express.json(),
    expressMiddleware(server, {
        context: async ({ req }) => ({ req }),
    }),
);

await new Promise<void>(resolve => httpServer.listen({ port: 4000 }, resolve));

console.log(`Server is connected and running on http://localhost:4000/`);
